@page "/admin"
@using System.Net.Http.Headers
@inject IAdminService AdminService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthStateProvider AuthProvider
@attribute [Authorize(Roles = "Admin , SuperAdmin")]

<h3>Administrative Panel</h3>
<p>This page is designated for updating users and reassigning roles</p>

<EditForm Model="users" OnSubmit="UpdateUser">

    <div class="col-3">
        <label>User Name</label>
        <InputSelect @bind-Value ="users.UserName" class="form-select">
            @foreach (var users in AdminService.Users)
            {
                 <option value ="@users.UserName">@users.UserName - @users.Name</option>
            }
        </InputSelect>
    </div> 
    <div class ="col-3">
        <label for="" class="form-label">Name</label>
        <InputText  @bind-Value = "users.Name" class="form-control mb-2" placeholder="Given Name"/>
    </div>
    <div class="col-3">
        <label for="Roles" class="form-label">Assign Role</label>
        <InputSelect @bind-Value = "users.Role" class="form-select mb-2">  
            @foreach (var roles in AdminService.Roles)
            {
                <option value ="@roles.Roles">@roles.Roles</option>
            }
        </InputSelect>
    </div>
    @* <div class="col-3">
        <label class="form-label">Enabled Status</label>
        <InputSelect @bind-Value ="users.Enabled" class="form-select mb-4">
            @foreach (var users in AdminService.Users)
            {
                <option value ="@users.Id">@users.Enabled</option>
            }
        </InputSelect>
    </div>  *@
    
    <div>
        <button class="btn btn-primary mb-4" @onclick="CreateUser">Create New User</button>
    </div>
    <div>    
        <button class="btn btn-primary mb-4" @onclick="UpdateUser">Update User</button>
    </div> 
   
   
 
</EditForm>


@code {
    User users = new();
    Role roles = new();

    bool isSubmitting = false;
  

    private async Task GetAuthState()
    {
        
        var token = await AuthProvider.GetToken();
        if(!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(GetUserList(), GetRoleList());
        users = AdminService.Users[0];
    }
    
    private async Task GetUserList()
    {
        
        await GetAuthState();
        await AdminService.GetUserList();
    }
    
    private async Task GetRoleList()
    {

        await GetAuthState();
        await AdminService.GetRoleList();
    }
    
    private async Task CreateUser()
    {
        await GetAuthState();
        NavigationManager.NavigateTo("/adduser");
    }
    
    private async Task UpdateUser()
    {
        isSubmitting = true;
        try
        {
            await GetAuthState();
            await AdminService.UpdateUser(users);
        }
        finally
        {
            isSubmitting = false;
        }
    }  
}
