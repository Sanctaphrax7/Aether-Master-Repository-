@* @page "/test"
@using System.Net.Http.Headers
@inject IAdminService AdminService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthStateProvider AuthProvider
@attribute [Authorize(Roles = "Admin , SuperAdmin")]


<h3>TEST PAGE</h3>
<EditForm Model ="users" OnSubmit="">
<div class="col-3">
    <label>User Name</label>
    <InputSelect @bind-Value="@selectedUserName" class="form-select">
        @foreach (var users in AdminService.Users)
        {
            <option value="@users.UserName">@users.UserName - @users.Name</option>
        }
    </InputSelect>
</div>
<div class="col-3">
    <label for="" class="form-label">Name</label>
    <InputText @bind-Value="users.Name" class="form-control mb-2" placeholder="Given Name"/>
</div>
<div class="col-3">
    <label for="@nameof(selectedRole)" class="form-label">Assign Role</label>
    <InputSelect @bind-Value="selectedRole" class="form-select mb-2">
        @if (!string.IsNullOrEmpty(selectedUserName))
        {
            var selectedUser = AdminService.Users.FirstOrDefault((u => u.UserName == selectedUserName));
            if (selectedUser != null)
            {
                <option value="@selectedUser.Role">@selectedUser.Role</option>

            }
        }
        
    </InputSelect>
</div>
</EditForm>

@code {
    string selectedUserName;
    string selectedRole;
    User selectedUser;
    private async Task GetAuthState()
    {
        
        var token = await AuthProvider.GetToken();
        if(!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(GetUserList(), GetRoleList());
        selectedUser = AdminService.Users.FirstOrDefault();
    }

    private async Task GetUserList()
    {
        
        await GetAuthState();
        await AdminService.GetUserList();
    }
    
    private async Task GetRoleList()
    {

        await GetAuthState();
        await AdminService.GetRoleList();
    }

} *@