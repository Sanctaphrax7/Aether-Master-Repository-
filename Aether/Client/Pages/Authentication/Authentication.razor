@page "/"
@using System.Net
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject AuthStateProvider AuthStateProvider
@inject IJSRuntime js


<h1>Sign In</h1>


<form>
    <EditForm Model="creds" OnValidSubmit="Login">
    <div class="col-3">
        <label for="username">Username</label>
        <input type="text" class="form-control  mb-2" id="username" placeholder ="User Name" @bind="creds.UserName"/>
    </div>
    <div class="col-3 ">
        <label for="password">Password</label>
        <input type="password" class="form-control  mb-4" id="password" placeholder="Password" @bind="creds.Password"/>
    </div>
    <button type="submit" class="btn btn-primary btn-block" @onclick="Login">Sign In</button>
    </EditForm>
</form>



@code {
    private string? errorMessage;
    UserDto creds = new UserDto();


    private async Task Login()
    {

        try
        {
            if(!string.IsNullOrEmpty(creds.UserName) && !string.IsNullOrEmpty(creds.Password))
            {

                var response = await AuthService.Login(creds);
               

                if(response.IsSuccessStatusCode)
                {
                    var userSession = await response.Content.ReadFromJsonAsync<UserSession>();
                    //await AuthStateProvider.GetAuthenticationStateAsync();
                    await AuthStateProvider.UpdateAuthenticationState(userSession);
                    NavigationManager.NavigateTo("/home", true);
                }
                else if(response.StatusCode == HttpStatusCode.Unauthorized)
                {
                    errorMessage = "Invalid Credentials";
                    await js.InvokeVoidAsync("alert" + errorMessage);
                } 

            }
            else
            {
                errorMessage = ("Please enter your username or password correctly");
            }
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }
       
        
    }

}

